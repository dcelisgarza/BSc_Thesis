program main
  use functions, only : init_random_seed
  implicit none
  call init_random_seed()
  call sb_data_collection
end program main

subroutine sb_data_collection
implicit none
integer, parameter :: n = 100, es = 2, int = 36 ! int = number of readings
integer j
double precision avgnum(es,int), denom(int), start, finish
double precision days, hours, minutes, seconds
CALL CPU_TIME(start)
open(unit=1, file='test.dat')
write(1,*) "#h=0.01, tmax=35.0, mc_steps=15000, gamma=0.366, eps=1.0, beta=12.5, &
& alpha=0.1, delta=1/2.5, initial state=1"
write(1,*) "# Time  ", "P 1<-1 - P2<-1  "

call sb_mc_avg(avgnum,denom,n,es,int)

do j = 1, int
   ! Write every x 'seconds': x*(j-1)
   write(1,*) 1.0*(j-1), (avgnum(1,j)-avgnum(2,j))/denom(j)
end do

CALL CPU_TIME(finish)
seconds = finish-start
days = floor(seconds/86400)
hours = floor(seconds/3600.0)
minutes = floor(mod(seconds/60.0,60.0))
seconds = mod(seconds,60.0)
write(1,*) '# Execution Time:'
write(1,*) '# days = ', days, 'hrs = ', hours, 'min = ', minutes, 's = ', seconds
end subroutine sb_data_collection

subroutine sb_mc_avg(avgnum,denom,n,es,int)
implicit none
integer n, es, int
integer i, j, run, maxrun
double precision num(es,int), avgnum(es,int), denom(int)
! Initialising variables
do j = 1, int
   do i = 1, es
      avgnum(i,j) = 0.0
   end do
   denom(j)   = 0.0
end do

! Parameters
maxrun = 10
do run = 1, maxrun
   call sb(num, n, es, int)
   ! Summing numerators. Only those corresponding to the final state will change.
   do j = 1, int
      do i = 1, es
         avgnum(i,j) = avgnum(i,j) + num(i,j)
      end do
   end do
end do

do j = 1, int
   do i = 1, es
      avgnum(i,j) = avgnum(i,j)/maxrun
      denom(j) = denom(j) + avgnum(i,j)
   end do
end do
end subroutine sb_mc_avg

subroutine sb(num, n, es, int)
use functions, only : heaviside, kdelta, rk4gnsb!, init_random_seed
implicit none
double precision, parameter :: pi = 4.0*atan(1.0)
integer n, es, int
integer k, j, i, counter, statei, statef
double precision xi(2*(n+es)), xf(2*(n+es)), w(n), c(n), dw, wc, m, a, b, gamma, rnd, rnd2(2)
double precision bni(es), sni(es), wi(es), bnf(es), snf(es), wf(es), q(es), arg, dsn
double precision num(es,int), numdum, ti, dt, tf, tmax
double precision c1, c2, c3
double precision flag1, flag2
! Normal distribution RNG data declarations
  real ( kind = 4 ) fn(128)
  integer ( kind = 4 ) kn(128)
  real ( kind = 4 ) r4_nor
  integer ( kind = 4 ) seed
  real ( kind = 8 ) rnrm
  real ( kind = 4 ) wn(128)
  double precision r
!------------------------------------------
external sb_eq ! Equations of motion.
! General variables
100 continue
gamma      = 0.366!(sqrt(3.0)-1.0)/2.0
dsn        = 2.0*gamma
arg        = 0.0
statef     = 0
numdum     = 1.0
do concurrent (k = 1: es)
   num(k,:) = 0.0 ! Initial numerators
   wi(k)    = 0.0
   wf(k)    = 0.0
end do

! Parameters.
ti      = 0.0
dt      = 0.01
tmax    = 35.0
statei  = 1

! Spin boson variables
wc       = 1.0     ! Characteristic frequency.
m        = 2000.0  ! Particle mass.
a        = 0.1    ! Kondo parameter.
b        = 12.5

! Assigning oscillating frequencies.
j = 1 ! Counter.
!call init_random_seed()
do while(j<=n)
   call random_number(rnd)
   w(j) = rnd*4.0*wc
   if(w(j) .ge. 0.01*wc .and. w(j) .le. 4.0*wc) then
      j = j + 1
   end if
end do
j = 0

! Initial electronic states.
do k = 1, es
   call random_number(rnd2)
   bni(k) = kdelta(statei,k)
   sni(k) = bni(k) + gamma*(2.0*rnd2(1)-1.0)
   q(k)   = 2.0*pi*rnd2(2)
   arg    = gamma-abs(sni(k)-bni(k))
   wi(k)  = heaviside(arg)/dsn
end do

dw = (maxval(w)-minval(w))/(n-1.0) ! Delta_w

! Calculating proportionality coefficients.
do concurrent (k = 1: n)
   c(k) = w(k)*sqrt(a*dw*m*exp(-w(k)/wc))
!   print*, c(k)
end do

! Initial momenta and positions follow a distributions.
call r4_nor_setup ( kn, fn, wn )
call random_number(r)
seed = floor(r*1000000000)
do concurrent (k = 1: n)
   c1 = sqrt(2.0*tanh(b*w(k)/2.0))
   c2 = w(k)*m
   c3 = sqrt(c2)
   ! Initial nuclear momenta
   rnrm = r4_nor ( seed, kn, fn, wn )
   xi(k+n) = rnrm*c3/c1  
   ! Initial nuclear positions
   rnrm = r4_nor ( seed, kn, fn, wn )
   xi(k) = rnrm/(c1*c3) - c(k)/(c2*w(k))
!   print*, xi(k+n) !BIG NUMBERS
end do

! Initial electronic coordinates
xi(201) = sqrt(2.0*(sni(1)+gamma))*cos(q(1))  ! x1
xi(202) = -sqrt(2.0*(sni(1)+gamma))*sin(q(1)) ! p1
xi(203) = sqrt(2.0*(sni(2)+gamma))*cos(q(2))  ! x2
xi(204) = -sqrt(2.0*(sni(2)+gamma))*sin(q(2)) ! p2
! Numerator for the initial population states.
j = 1
do k = 1, es
      numdum = numdum*wi(k)*wi(k)
end do
num(statei,j) = numdum ! Initial numerator (in this case we start in state 1)
numdum = 1.0 ! Reset for the next time it's used.

! Integrate hamilton's equations
counter = 0
do while(ti<tmax)
   tf = ti + dt
   call rk4gnsb(sb_eq,ti,tf,xi,xf,w,c,2*(n+es),es)
!   flag1 = 0.5*xf(201)**2.0 + 0.5*xf(202)**2.0
!   flag1 = 0.5*xf(203)**2.0 + 0.5*xf(204)**2.0
!   if(flag1 .ge. 2.0 .or. flag2 .ge. 2.0) then
!      print*, "fucking shit"
!   end if
   ! Prepares next iteration
   ti = tf
   do concurrent (i = 1: 2*(n+es))
      xi(i) = xf(i)
   end do
!   print*, xi(201), xi(202), xi(203), xi(204)
   ! Calculating intermediate populations.
   counter = counter + 1
   if (mod(counter,100) .eq. 0) then ! Every 2 units of time, or Delta_t/dt = 2/0.01 = 200 time steps.
      j = j + 1 ! Counter for intermediate time step.
      i = 0     ! counter used to calculate nk(t).
      ! Calculating nk(t).
      do concurrent (k = 1: es)
         snf(k) = 0.5*xf(200+k+i)**2.0 + 0.5*xf(200+k+1+i)**2.0
         i      = i + 1
      end do
      !print*, j, snf(1), snf(2)
      if(1.0 .le. snf(1) .and. snf(1) .le. 1.0 + dsn) then
         statef  = 1
      else if(0.0 .le. snf(1) .and. snf(1) .le. dsn) then
         statef  = 2
      else
         go to 100
      end if
      ! Intermediate Electronic states.
      do k = 1, es
         bnf(k) = kdelta(statef,k)
         arg    = gamma - abs(snf(k)-bnf(k))
         wf(k)  = heaviside(arg)/dsn
      end do
      do k = 1, es
         numdum = numdum*wi(k)*wf(k)
      end do
! Only the numerator which corresponds to the final state will change, the other will remain 0.0
      num(statef,j) = numdum
      numdum = 1.0
   end if
end do
end subroutine sb

subroutine sb_eq(t,x,dx,w,c,n,es)
!===========================================================================!
! Equations of motion of single avoided crossing                            !
! Daniel Celis Garza 25 March 2015                                          !
!---------------------------------------------------------------------------!
! x(1)   -> x(100) = R1 -> R100     dx(1)   -> dx(100) = dR1/dt -> dR100/dt !
! x(101) -> x(200) = P1 -> P100     dx(101) -> dx(200) = dP1/dt -> dP100/dt !
! x(201) = x1                       dx(3)              = dx1/dt             !
! x(202) = p1                       dx(4)              = dp1/dt             !
! x(203) = x2                       dx(5)              = dx2/dt             !
! x(204) = p2                       dx(6)              = dp2/dt             !
!---------------------------------------------------------------------------!
! h(1) = H11  h(2) = H12  h(3) = H21  h(4) = H22                            !
! H11, H22, H33, H44 have to be differentiated individually.                !
!===========================================================================!
integer n, es, i
integer nuc
double precision x(n), dx(n), w(n/2 - es), c(n/2 - es), m, v0, v1, eps, delta
double precision c1
nuc = n/2 - es
m  = 2000.0
eps = 1.0
delta = 1.0/2.5
v0 = 0.0
v1 = 0.0

! V0 and V1
do i = 1, n/2-es
   v0 = v0 + w(i)**2.0*x(i)**2.0
   v1 = v1 + c(i)*x(i)
end do
v0 = 1000.0*v0

! H11, H22, H33 and H44
!h(1) = v0 + v1 + eps
!h(2) = delta
!h(3) = delta
!h(4) = v0 - v1 - eps

c1 = v1 + eps
! Equations of motion.
! Positions and momenta.
do i = 1, nuc
   dx(i)     = x(i+nuc)/m
   dx(i+nuc) = -m*w(i)**2.0*x(i) &
               - 0.5*c(i)*(x(201)**2.0+x(202)**2.0-x(203)**2.0-x(204)**2.0)
end do
! Electronic states.
dx(201) = x(202)*c1 + x(204)*delta
dx(202) = -x(201)*c1 - x(203)*delta
dx(203) = -x(204)*c1 + x(202)*delta
dx(204) = x(203)*c1 - x(201)*delta
end subroutine sb_eq

!****************************************************
! Ziggurat algorithm
! I modified it so that the seeds are random not fixed.
!****************************************************
function r4_exp ( jsr, ke, fe, we )

!*****************************************************************************80
!
!! R4_EXP returns an exponentially distributed single precision real value.
!
!  Discussion:
!
!    The underlying algorithm is the ziggurat method.
!
!    Before the first call to this function, the user must call R4_EXP_SETUP
!    to determine the values of KE, FE and WE.
!
!    Note that JSR and KE should actually be of unsigned integer type, but
!    this data type is not supported by FORTRAN90.
!
!  Licensing:
!
!    This code is distributed under the GNU LGPL license.
!
!  Modified:
!
!    04 May 2008
!
!  Author:
!
!    Original C version by George Marsaglia, Wai Wan Tsang.
!    FORTRAN90 version by John Burkardt.
!
!  Reference:
!
!    George Marsaglia, Wai Wan Tsang,
!    The Ziggurat Method for Generating Random Variables,
!    Journal of Statistical Software,
!    Volume 5, Number 8, October 2000, seven pages.
!
!  Parameters:
!
!    Input/output, integer ( kind = 4 ) JSR, the seed.
!
!    Input, integer ( kind = 4 ) KE(256), data computed by R4_EXP_SETUP.
!
!    Input, real ( kind = 4 ) FE(256), WE(256), data computed by R4_EXP_SETUP.
!
!    Output, real ( kind = 4 ) R4_EXP, an exponentially distributed
!    random value.
!
  implicit none

  real ( kind = 4 ) fe(256)
  integer ( kind = 4 ) iz
  integer ( kind = 4 ) jsr
  integer ( kind = 4 ) jz
  integer ( kind = 4 ) ke(256)
  real ( kind = 4 ) r4_exp
  real ( kind = 4 ) r4_uni
  integer ( kind = 4 ) shr3
  real ( kind = 4 ) value
  real ( kind = 4 ) we(256)
  real ( kind = 4 ) x

  jz = shr3 ( jsr )
  iz = iand ( jz, 255 )

  if ( abs ( jz  ) < ke(iz+1) ) then

    value = real ( abs ( jz ), kind = 4 ) * we(iz+1)

  else

    do

      if ( iz == 0 ) then
        value = 7.69711E+00 - log ( r4_uni ( jsr ) )
        exit
      end if

      x = real ( abs ( jz ), kind = 4 ) * we(iz+1)

      if ( fe(iz+1) + r4_uni ( jsr ) * ( fe(iz) - fe(iz+1) ) &
           < exp ( - x ) )  then
        value = x
        exit
      end if

      jz = shr3 ( jsr )
      iz = iand ( jz, 255 )

      if ( abs ( jz ) < ke(iz+1) ) then
        value = real ( abs ( jz ), kind = 4 ) * we(iz+1)
        exit
      end if

    end do

  end if

  r4_exp = value

  return
end
subroutine r4_exp_setup ( ke, fe, we )

!*****************************************************************************80
!
!! R4_EXP_SETUP sets data needed by R4_EXP.
!
!  Discussion:
!
!    Note that KE should actually be of unsigned integer type, but
!    this data type is not supported by FORTRAN90.
!
!  Licensing:
!
!    This code is distributed under the GNU LGPL license.
!
!  Modified:
!
!    06 December 2008
!
!  Author:
!
!    Original C version by George Marsaglia, Wai Wan Tsang.
!    FORTRAN90 version by John Burkardt.
!
!  Reference:
!
!    George Marsaglia, Wai Wan Tsang,
!    The Ziggurat Method for Generating Random Variables,
!    Journal of Statistical Software,
!    Volume 5, Number 8, October 2000, seven pages.
!
!  Parameters:
!
!    Output, integer ( kind = 4 ) KE(256), data needed by R4_EXP.
!
!    Output, real ( kind = 4 ) FE(256), WE(256), data needed by R4_EXP.
!
  implicit none

  real ( kind = 8 ) de
  real ( kind = 4 ) fe(256)
  integer ( kind = 4 ) i
  integer ( kind = 4 ) ke(256)
! real ( kind = 8 ), parameter :: m2 = 4294967296.0D+00
  real ( kind = 8 ), parameter :: m2 = 2147483648.0D+00
  real ( kind = 8 ) q
  real ( kind = 8 ) te
  real ( kind = 8 ), parameter :: ve = 3.949659822581572D-03
  real ( kind = 4 ) we(256)

  de = 7.697117470131487D+00
  te = 7.697117470131487D+00

  q = ve / exp ( - de )

  ke(1) = int ( ( de / q ) * m2 )
  ke(2) = 0

  we(1) = real ( q / m2, kind = 4 )
  we(256) = real ( de / m2, kind = 4 )

  fe(1) = 1.0E+00
  fe(256) = real ( exp ( - de ), kind = 4 )

  do i = 255, 2, -1
    de = - log ( ve / de + exp ( - de ) )
    ke(i+1) = int ( ( de / te ) * m2 )
    te = de
    fe(i) = real ( exp ( - de ), kind = 4 )
    we(i) = real ( de / m2, kind = 4 )
  end do

  return
end
function r4_nor ( jsr, kn, fn, wn )

!*****************************************************************************80
!
!! R4_NOR returns a normally distributed single precision real value.
!
!  Discussion:
!
!    The value returned is generated from a distribution with mean 0 and
!    variance 1.
!
!    The underlying algorithm is the ziggurat method.
!
!    Before the first call to this function, the user must call R4_NOR_SETUP
!    to determine the values of KN, FN and WN.
!
!    Note that JSR and KN should actually be of unsigned integer type, but
!    this data type is not supported by FORTRAN90.
!
!  Licensing:
!
!    This code is distributed under the GNU LGPL license.
!
!  Modified:
!
!    04 May 2008
!
!  Author:
!
!    Original C version by George Marsaglia, Wai Wan Tsang.
!    FORTRAN90 version by John Burkardt.
!
!  Reference:
!
!    George Marsaglia, Wai Wan Tsang,
!    The Ziggurat Method for Generating Random Variables,
!    Journal of Statistical Software,
!    Volume 5, Number 8, October 2000, seven pages.
!
!  Parameters:
!
!    Input/output, integer ( kind = 4 ) JSR, the seed.
!
!    Input, integer ( kind = 4 ) KN(128), data computed by R4_NOR_SETUP.
!
!    Input, real ( kind = 4 ) FN(128), WN(128), data computed by R4_NOR_SETUP.
!
!    Output, real ( kind = 4 ) R4_NOR, a normally distributed random value.
!
  implicit none

  real ( kind = 4 ) fn(128)
  integer ( kind = 4 ) hz
  integer ( kind = 4 ) iz
  integer ( kind = 4 ) jsr
  integer ( kind = 4 ) kn(128)
  real ( kind = 4 ), parameter :: r = 3.442620E+00
  real ( kind = 4 ) r4_nor
  real ( kind = 4 ) r4_uni
  integer ( kind = 4 ) shr3
  real ( kind = 4 ) value
  real ( kind = 4 ) wn(128)
  real ( kind = 4 ) x
  real ( kind = 4 ) y

  hz = shr3 ( jsr )
  iz = iand ( hz, 127 )

  if ( abs ( hz ) < kn(iz+1) ) then

    value = real ( hz, kind = 4 ) * wn(iz+1)

  else

    do

      if ( iz == 0 ) then

        do
          x = - 0.2904764E+00 * log ( r4_uni ( jsr ) )
          y = - log ( r4_uni ( jsr ) )
          if ( x * x <= y + y ) then
            exit
          end if
        end do

        if ( hz <= 0 ) then
          value = - r - x
        else
          value = + r + x
        end if

        exit

      end if

      x = real ( hz, kind = 4 ) * wn(iz+1)

      if ( fn(iz+1) + r4_uni ( jsr ) * ( fn(iz) - fn(iz+1) ) &
         < exp ( - 0.5E+00 * x * x ) ) then
        value = x
        exit
      end if

      hz = shr3 ( jsr )
      iz = iand ( hz, 127 )

      if ( abs ( hz ) < kn(iz+1) ) then
        value = real ( hz, kind = 4 ) * wn(iz+1)
        exit
      end if

    end do

  end if

  r4_nor = value

  return
end
subroutine r4_nor_setup ( kn, fn, wn )

!*****************************************************************************80
!
!! R4_NOR_SETUP sets data needed by R4_NOR.
!
!  Discussion:
!
!    Note that KN should actually be of unsigned integer type, but
!    this data type is not supported by FORTRAN90.
!
!  Licensing:
!
!    This code is distributed under the GNU LGPL license.
!
!  Modified:
!
!    04 May 2008
!
!  Author:
!
!    Original C version by George Marsaglia, Wai Wan Tsang.
!    FORTRAN90 version by John Burkardt.
!
!  Reference:
!
!    George Marsaglia, Wai Wan Tsang,
!    The Ziggurat Method for Generating Random Variables,
!    Journal of Statistical Software,
!    Volume 5, Number 8, October 2000, seven pages.
!
!  Parameters:
!
!    Output, integer ( kind = 4 ) KN(128), data needed by R4_NOR.
!
!    Output, real ( kind = 4 ) FN(128), WN(128), data needed by R4_NOR.
!
  implicit none

  real ( kind = 8 ) dn
  real ( kind = 4 ) fn(128)
  integer ( kind = 4 ) i
  integer ( kind = 4 ) kn(128)
  real ( kind = 8 ), parameter :: m1 = 2147483648.0D+00
  real ( kind = 8 ) q
  real ( kind = 8 ) tn
  real ( kind = 8 ), parameter :: vn = 9.91256303526217D-03
  real ( kind = 4 ) wn(128)

  dn = 3.442619855899D+00
  tn = 3.442619855899D+00

  q = vn / exp ( - 0.5D+00 * dn * dn )

  kn(1) = int ( ( dn / q ) * m1 )
  kn(2) = 0

  wn(1) = real ( q / m1, kind = 4 )
  wn(128) = real ( dn / m1, kind = 4 )

  fn(1) = 1.0E+00
  fn(128) = real ( exp ( - 0.5D+00 * dn * dn ), kind = 4 )

  do i = 127, 2, -1
    dn = sqrt ( - 2.0D+00 * log ( vn / dn + exp ( - 0.5D+00 * dn * dn ) ) )
    kn(i+1) = int ( ( dn / tn ) * m1 )
    tn = dn
    fn(i) = real ( exp ( - 0.5D+00 * dn * dn ), kind = 4 )
    wn(i) = real ( dn / m1, kind = 4 )
  end do

  return
end
function r4_uni ( jsr )

!*****************************************************************************80
!
!! R4_UNI returns a uniformly distributed real value.
!
!  Licensing:
!
!    This code is distributed under the GNU LGPL license.
!
!  Modified:
!
!    20 May 2008
!
!  Author:
!
!    Original C version by George Marsaglia, Wai Wan Tsang.
!    FORTRAN90 version by John Burkardt.
!
!  Reference:
!
!    George Marsaglia, Wai Wan Tsang,
!    The Ziggurat Method for Generating Random Variables,
!    Journal of Statistical Software,
!    Volume 5, Number 8, October 2000, seven pages.
!
!  Parameters:
!
!    Input/output, integer ( kind = 4 ) JSR, the seed.
!
!    Output, real ( kind = 4 ) R4_UNI, a uniformly distributed random value in
!    the range [0,1].
!
  implicit none

  integer ( kind = 4 ) jsr
  integer ( kind = 4 ) jsr_input
  real ( kind = 4 ) r4_uni

  jsr_input = jsr

  jsr = ieor ( jsr, ishft ( jsr,   13 ) )
  jsr = ieor ( jsr, ishft ( jsr, - 17 ) )
  jsr = ieor ( jsr, ishft ( jsr,    5 ) )

! r4_uni = 0.5E+00 + 0.2328306E-09 * real ( jsr_input + jsr, kind = 4 )

  r4_uni = 0.5E+00 + real ( jsr_input + jsr, kind = 4 ) &
    / real ( 65536, kind = 4 ) / real ( 65536, kind = 4 )

  return
end
function shr3 ( jsr )

!*****************************************************************************80
!
!! SHR3 evaluates the SHR3 generator for integers.
!
!  Discussion:
!
!    Note that JSR should actually be of unsigned integer type, but
!    this data type is not supported by FORTRAN77.
!
!  Licensing:
!
!    This code is distributed under the GNU LGPL license.
!
!  Modified:
!
!    01 May 2008
!
!  Author:
!
!    Original C version by George Marsaglia, Wai Wan Tsang.
!    FORTRAN90 version by John Burkardt.
!
!  Reference:
!
!    George Marsaglia, Wai Wan Tsang,
!    The Ziggurat Method for Generating Random Variables,
!    Journal of Statistical Software,
!    Volume 5, Number 8, October 2000, seven pages.
!
!  Parameters:
!
!    Input/output, integer ( kind = 4 ) JSR, the seed.
!
!    Output, integer ( kind = 4 ) SHR3, the value of the SHR3 generator.
!
  implicit none

  integer ( kind = 4 ) jsr
  integer ( kind = 4 ) jsr_input
  integer ( kind = 4 ) shr3

  jsr_input = jsr

  jsr = ieor ( jsr, ishft ( jsr,   13 ) )
  jsr = ieor ( jsr, ishft ( jsr, - 17 ) )
  jsr = ieor ( jsr, ishft ( jsr,    5 ) )

  shr3 = jsr_input + jsr

  return
end
subroutine timestamp ( )

!*****************************************************************************80
!
!! TIMESTAMP prints the current YMDHMS date as a time stamp.
!
!  Example:
!
!    31 May 2001   9:45:54.872 AM
!
!  Licensing:
!
!    This code is distributed under the GNU LGPL license.
!
!  Modified:
!
!    18 May 2013
!
!  Author:
!
!    John Burkardt
!
!  Parameters:
!
!    None
!
  implicit none

  character ( len = 8 ) ampm
  integer ( kind = 4 ) d
  integer ( kind = 4 ) h
  integer ( kind = 4 ) m
  integer ( kind = 4 ) mm
  character ( len = 9 ), parameter, dimension(12) :: month = (/ &
    'January  ', 'February ', 'March    ', 'April    ', &
    'May      ', 'June     ', 'July     ', 'August   ', &
    'September', 'October  ', 'November ', 'December ' /)
  integer ( kind = 4 ) n
  integer ( kind = 4 ) s
  integer ( kind = 4 ) values(8)
  integer ( kind = 4 ) y

  call date_and_time ( values = values )

  y = values(1)
  m = values(2)
  d = values(3)
  h = values(5)
  n = values(6)
  s = values(7)
  mm = values(8)

  if ( h < 12 ) then
    ampm = 'AM'
  else if ( h == 12 ) then
    if ( n == 0 .and. s == 0 ) then
      ampm = 'Noon'
    else
      ampm = 'PM'
    end if
  else
    h = h - 12
    if ( h < 12 ) then
      ampm = 'PM'
    else if ( h == 12 ) then
      if ( n == 0 .and. s == 0 ) then
        ampm = 'Midnight'
      else
        ampm = 'AM'
      end if
    end if
  end if

  write ( *, '(i2,1x,a,1x,i4,2x,i2,a1,i2.2,a1,i2.2,a1,i3.3,1x,a)' ) &
    d, trim ( month(m) ), y, h, ':', n, ':', s, '.', mm, trim ( ampm )

  return
end
